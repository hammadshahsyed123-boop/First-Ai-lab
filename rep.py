# -*- coding: utf-8 -*-
"""Rep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bacIe8bSvPSQL8q9DwmC9k6bu3UmxObv

# **Undirected Graph**
"""

from collections import deque

pakistan_cities = {
    'Haripur': ['Mansehra'],
    'Mansehra': ['Haripur', 'Abbottabad'],
    'Abbottabad': ['Mansehra', 'Kohat', 'Quetta'],
    'Kohat': ['Abbottabad', 'Lahore'],
    'Quetta': ['Abbottabad'],
    'Lahore': ['Kohat', 'Nowshehra'],
    'Nowshehra': ['Lahore', 'Peshawar'],
    'Peshawar': ['Nowshehra']
}

def bfs_shortest_path(graph, start, goal):

    queue = deque([[start]])

    visited = set()


    while queue:

        path = queue.popleft()
        current_city = path[-1]


        if current_city == goal:
            return path


        if current_city not in visited:
            visited.add(current_city)


            for neighbor in graph.get(current_city, []):

                new_path = list(path)

                new_path.append(neighbor)

                queue.append(new_path)

    return None

def dfs_path(graph, start, goal, path=None, visited=None):


    "path starts as an empty list to record the route you take."
    if path is None:
        path = []
        "visited starts as an empty set to remember visited places so you don't repeat them."
    if visited is None:
        visited = set()


    path.append(start)

    visited.add(start)


    if start == goal:
        return path


    for neighbor in graph.get(start, []):
        if neighbor not in visited:

            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())


            if result:
                return result

    return None


start_city = "Haripur"
goal_city = "Peshawar"



bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from Haripur to Peshawar:", bfs_result)

dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from Haripur to Peshawar:", dfs_result)