# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1waBbV2aU_KGEe-Xc241ExOK7XcnmOOtq

# Alpha Beta Prunning
"""

def alpha_beta_pruning(depth, nodeIndex, isMax, values, alpha, beta, maxDepth):
    # Base case: when we reach a leaf node
    if depth == maxDepth:
        return values[nodeIndex]

    if isMax:
        best = float('-inf')

        # Recur for left and right children
        for i in range(2):
            val = alpha_beta_pruning(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta, maxDepth)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha Beta Pruning condition
            if beta <= alpha:
                break

        return best
    else:
        best = float('inf')

        # Recur for left and right children
        for i in range(2):
            val = alpha_beta_pruning(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta, maxDepth)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha Beta Pruning condition
            if beta <= alpha:
                break

        return best

        values = [10, 15, 20, 25, 5, 8, 12, 18]
maxDepth = 3

# Initial alpha and beta values
alpha = float('-inf')
beta = float('inf')

# Root node call
print("The optimal value is:", alpha_beta_pruning(0, 0, True, values, alpha, beta, maxDepth))